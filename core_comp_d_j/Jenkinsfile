#!groovy

@Library(value='corecomp-alsw-shared-library@feature/zlib__docker', changelog=false) _
import docker.DockerImageTemplates

def docker_agent = new DockerImageTemplates(this)
def docker_agent_details = docker_agent.get_docker_details("generic", "5.0","alsw")


pipeline {
    agent {
        docker {
            alwaysPull true
            image docker_agent_details["imagename"]
            args docker_agent_details["args"]
            label docker_agent_details["label"]
        }
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        timeout(time: 10, unit: 'MINUTES')
        ansiColor('xterm')
        throttleJobProperty(
            categories: ['F360_ASTP'],
            limitOneJobWithMatchingParams: false,
            throttleEnabled: true,
            paramsToUseForLimit: '',
            throttleOption: 'category',
            maxConcurrentPerNode: 0,
            maxConcurrentTotal: 1
        )

    }
    stages {
        stage('Test') {
            steps {
                echo "Welcome to the Sandbox Repo!"
                sh "env | sort"
            }
        }
        stage('Some code-checker') {
            steps {
                echo "This should run some codechecker."
                gerritReview labels: ['Code-Review': 1], message: "Code is clean 1!"
            }
        }
    }
    post {
        success {
            echo "successful"
            script {
                if (env.GERRIT_REFNAME != null && env.GERRIT_REFNAME.startsWith("refs/changes/")) {
                    gerritReview labels: [Verified: 1], message: "Verified via ${env.JOB_URL}"
                    // gerritCheck checks: ['example:checker': 'SUCCESSFUL']
                }
            }
        }
        unstable {
            script {
                if (env.GERRIT_REFNAME != null && env.GERRIT_REFNAME.startsWith("refs/changes/")) {
                    gerritReview labels: [Verified: 0], message: 'Build is unstable'
                }
            }
        }
        failure {
            script {
                if (env.GERRIT_REFNAME != null && env.GERRIT_REFNAME.startsWith("refs/changes/")) {
                    gerritReview labels: [Verified: -1], message: "Rejected via ${env.JOB_URL}"
                    // gerritCheck checks: ['example:checker': 'FAILED'], message: 'invalid syntax'
                }
            }
        }
    }
}
